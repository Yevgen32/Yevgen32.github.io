{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\nconst loggerMiddleware = createLogger(); // export const store = createStore(\n//     rootReducer,\n//     applyMiddleware(\n//         thunkMiddleware,\n//         loggerMiddleware\n//     )\n// );\n\nconst asyncFunctionMiddleware = storeAPI => next => action => {\n  // If the \"action\" is actually a function instead...\n  if (typeof action === 'function') {\n    // then call the function and pass `dispatch` and `getState` as arguments\n    return action(storeAPI.dispatch, storeAPI.getState);\n  } // Otherwise, it's a normal action - send it onwards\n\n\n  return next(action);\n};\n\nconst middlewareEnhancer = applyMiddleware(asyncFunctionMiddleware);\nconst store = createStore(rootReducer, middlewareEnhancer); // Write a function that has `dispatch` and `getState` as arguments\n\nconst fetchSomeData = (dispatch, getState) => {\n  // Make an async HTTP request\n  client.get('todos').then(todos => {\n    // Dispatch an action with the todos we received\n    dispatch({\n      type: 'todos/todosLoaded',\n      payload: todos\n    }); // Check the updated store state after dispatching\n\n    const allTodos = getState().todos;\n    console.log('Number of todos after loading: ', allTodos.length);\n  });\n}; // Pass the _function_ we wrote to `dispatch`\n\n\nstore.dispatch(fetchSomeData); // logs: 'Number of todos after loading: ###'","map":{"version":3,"sources":["/home/yevgen/project/react-git-search-app/src/store/store.ts"],"names":["createStore","applyMiddleware","createLogger","rootReducer","loggerMiddleware","asyncFunctionMiddleware","storeAPI","next","action","dispatch","getState","middlewareEnhancer","store","fetchSomeData","client","get","then","todos","type","payload","allTodos","console","log","length"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,gBAAgB,GAAGF,YAAY,EAArC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,uBAAuB,GAAGC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC1D;AACA,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAC9B;AACA,WAAOA,MAAM,CAACF,QAAQ,CAACG,QAAV,EAAoBH,QAAQ,CAACI,QAA7B,CAAb;AACH,GALyD,CAO1D;;;AACA,SAAOH,IAAI,CAACC,MAAD,CAAX;AACH,CATD;;AAWA,MAAMG,kBAAkB,GAAGV,eAAe,CAACI,uBAAD,CAA1C;AACA,MAAMO,KAAK,GAAGZ,WAAW,CAACG,WAAD,EAAcQ,kBAAd,CAAzB,C,CAEA;;AACA,MAAME,aAAa,GAAG,CAACJ,QAAD,EAAWC,QAAX,KAAwB;AAC1C;AACAI,EAAAA,MAAM,CAACC,GAAP,CAAW,OAAX,EAAoBC,IAApB,CAAyBC,KAAK,IAAI;AAC9B;AACAR,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE,mBAAR;AAA6BC,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR,CAF8B,CAG9B;;AACA,UAAMG,QAAQ,GAAGV,QAAQ,GAAGO,KAA5B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,QAAQ,CAACG,MAAxD;AACH,GAND;AAOH,CATD,C,CAWA;;;AACAX,KAAK,CAACH,QAAN,CAAeI,aAAf,E,CACA","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\n\nconst loggerMiddleware = createLogger();\n\n// export const store = createStore(\n//     rootReducer,\n//     applyMiddleware(\n//         thunkMiddleware,\n//         loggerMiddleware\n//     )\n// );\n\nconst asyncFunctionMiddleware = storeAPI => next => action => {\n    // If the \"action\" is actually a function instead...\n    if (typeof action === 'function') {\n        // then call the function and pass `dispatch` and `getState` as arguments\n        return action(storeAPI.dispatch, storeAPI.getState)\n    }\n\n    // Otherwise, it's a normal action - send it onwards\n    return next(action)\n}\n\nconst middlewareEnhancer = applyMiddleware(asyncFunctionMiddleware)\nconst store = createStore(rootReducer, middlewareEnhancer)\n\n// Write a function that has `dispatch` and `getState` as arguments\nconst fetchSomeData = (dispatch, getState) => {\n    // Make an async HTTP request\n    client.get('todos').then(todos => {\n        // Dispatch an action with the todos we received\n        dispatch({ type: 'todos/todosLoaded', payload: todos })\n        // Check the updated store state after dispatching\n        const allTodos = getState().todos\n        console.log('Number of todos after loading: ', allTodos.length)\n    })\n}\n\n// Pass the _function_ we wrote to `dispatch`\nstore.dispatch(fetchSomeData)\n// logs: 'Number of todos after loading: ###'"]},"metadata":{},"sourceType":"module"}