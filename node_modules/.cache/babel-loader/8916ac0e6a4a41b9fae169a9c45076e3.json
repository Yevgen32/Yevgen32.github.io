{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport { ApiError, ValidationError, PermissionError } from '../error/error.types';\nexport function isValid(url, response) {\n  if (response.code === 401) {\n    throw new PermissionError(`Access denied [${response.code}] to ${url}`);\n  }\n\n  if (response.status !== 'ok') {\n    throw new ValidationError(`${response.code} ${response.data}`, {\n      code: response.code,\n      data: response.data\n    });\n  }\n\n  return response;\n}\nexport default async function api(url, options, headers) {\n  const mode = 'cors';\n\n  try {\n    const request = fetch(`${url}`, Object.assign({}, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        ...headers\n      },\n      mode\n    }, options, options !== null && options !== void 0 && options.body && (options === null || options === void 0 ? void 0 : options.method) !== 'GET' ? {\n      body: JSON.stringify(options.body)\n    } : {}));\n    const result = await request;\n    console.log(\"result\", result); // let response: Response<T> = null!;\n    // if (result.ok) {\n    //     response = await result.json();\n    // } else {\n    //     throw new ValidationError('Json parsing error', {\n    //         code: result.status,\n    //         data: {\n    //             url,\n    //             method: options?.method,\n    //         },\n    //     });\n    // }\n\n    console.log(\"response\", response);\n    console.group(`API Request Debug ${url}`);\n    console.info(`Url ${url}`);\n    console.info('Response', response);\n    return response;\n  } catch (e) {\n    if (e instanceof ValidationError) {\n      throw e;\n    }\n\n    throw new ApiError(e.message, {\n      code: 500,\n      stack: e.stack\n    });\n  }\n}\nexport const pause = duration => new Promise(res => setTimeout(res, duration));\nexport async function retry(retries, fn, delay = 500, delayMultiply = 1) {\n  try {\n    return await fn();\n  } catch (e) {\n    if (retries > 1) {\n      await pause(delay);\n      return retry(retries - 1, fn, delay * delayMultiply);\n    }\n\n    throw e;\n  }\n}","map":{"version":3,"sources":["/home/yevgen/project/react-git-search-app/src/api/api.ts"],"names":["fetch","ApiError","ValidationError","PermissionError","isValid","url","response","code","status","data","api","options","headers","mode","request","Object","assign","Accept","body","method","JSON","stringify","result","console","log","group","info","e","message","stack","pause","duration","Promise","res","setTimeout","retry","retries","fn","delay","delayMultiply"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nimport type http from 'http';\nimport { ApiError, ValidationError, PermissionError } from '../error/error.types';\n\n\nimport type { Response, Options } from './api.types';\n\nexport function isValid<T>(url: string, response: Response<T>): Response<T> | never {\n    if (response.code === 401) {\n        throw new PermissionError(`Access denied [${response.code}] to ${url}`);\n    }\n\n    if (response.status !== 'ok') {\n        throw new ValidationError(`${response.code} ${response.data}`, {\n            code: response.code,\n            data: response.data,\n        });\n    }\n    return response;\n}\n\nexport default async function api<T>(\n    url: string,\n    options?: Options,\n    headers?: http.OutgoingHttpHeaders,\n) {\n    const mode: RequestMode = 'cors';\n    try {\n        const request = fetch(\n            `${url}`,\n            Object.assign(\n                {},\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        ...headers,\n                    },\n                    mode,\n                },\n                options,\n                options?.body && options?.method !== 'GET' ? { body: JSON.stringify(options.body) } : {},\n            ),\n        );\n        const result = await request;\n        console.log(\"result\", result)\n\n        // let response: Response<T> = null!;\n\n        // if (result.ok) {\n        //     response = await result.json();\n        // } else {\n        //     throw new ValidationError('Json parsing error', {\n        //         code: result.status,\n        //         data: {\n        //             url,\n        //             method: options?.method,\n        //         },\n        //     });\n        // }\n\n        console.log(\"response\", response)\n        console.group(`API Request Debug ${url}`);\n        console.info(`Url ${url}`);\n        console.info('Response', response);\n\n        return response;\n    } catch (e) {\n        if (e instanceof ValidationError) {\n            throw e;\n        }\n\n        throw new ApiError(e.message, {\n            code: 500,\n            stack: e.stack,\n        });\n    }\n}\n\nexport const pause = (duration: number): Promise<void> =>\n    new Promise(res => setTimeout(res, duration));\n\n\nexport async function retry<T>(\n    retries: number,\n    fn: () => Promise<T>,\n    delay = 500,\n    delayMultiply = 1,\n): Promise<T> {\n    try {\n        return await fn();\n    } catch (e) {\n        if (retries > 1) {\n            await pause(delay);\n            return retry(retries - 1, fn, delay * delayMultiply);\n        }\n        throw e;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}