{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n// import { IS_WEB, IS_REACT_NATIVE } from './environment.const';\nimport { ApiError, ValidationError, PermissionError } from '../error/error.types'; // constants\n// import env from '../../server/env';\n// import { defaultLanguage } from '../app/languages';\n// import { mobileHeaders } from './api';\n\nexport function isValid(url, response) {\n  if (response.code === 401) {\n    throw new PermissionError(`Access denied [${response.code}] to ${url}`);\n  }\n\n  if (response.status !== 'ok') {\n    throw new ValidationError(`${response.code} ${response.data}`, {\n      code: response.code,\n      data: response.data\n    });\n  }\n\n  return response;\n} // `${env.api}${url}${url.includes('?') ? `&language=${lang}` : `?language=${lang}`}`\n\nexport default async function api(url, lang, options, headers) {\n  const credentials = 'omit';\n  const mode = 'cors';\n\n  try {\n    const request = fetch(`${url}`, Object.assign({}, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        // 'Accept-Language': lang || defaultLanguage,\n        // 'Content-Language': lang || defaultLanguage,\n        ...headers\n      },\n      mode,\n      credentials\n    }, options, options !== null && options !== void 0 && options.body && (options === null || options === void 0 ? void 0 : options.method) !== 'GET' ? {\n      body: JSON.stringify(options.body)\n    } : {}));\n    const result = await request;\n    let response = null;\n\n    if (result.headers.get('content-type') === 'application/json') {\n      response = await result.json();\n    } else {\n      throw new ValidationError('Json parsing error', {\n        code: result.status,\n        data: {\n          url,\n          method: options === null || options === void 0 ? void 0 : options.method\n        }\n      });\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      /* eslint-disable no-console */\n      console.group(`API Request Debug ${url}`);\n      console.info(`Url ${url}`);\n      console.info('Response', response);\n      console.groupCollapsed('Stack trace');\n      console.trace();\n      console.groupEnd();\n      console.groupEnd();\n      /* eslint-enable no-console */\n    }\n\n    return [isValid(url, response), result.headers];\n  } catch (e) {\n    if (e instanceof ValidationError || e instanceof PermissionError) {\n      throw e;\n    }\n\n    throw new ApiError(e.message, {\n      code: 500,\n      stack: e.stack\n    });\n  }\n}\nexport const pause = duration => new Promise(res => setTimeout(res, duration));\nexport async function retry(retries, fn, delay = 500, delayMultiply = 1) {\n  try {\n    return await fn();\n  } catch (e) {\n    if (retries > 1) {\n      await pause(delay);\n      return retry(retries - 1, fn, delay * delayMultiply);\n    }\n\n    throw e;\n  }\n}","map":{"version":3,"sources":["/home/yevgen/project/react-git-search-app/src/api/api.ts"],"names":["fetch","ApiError","ValidationError","PermissionError","isValid","url","response","code","status","data","api","lang","options","headers","credentials","mode","request","Object","assign","Accept","body","method","JSON","stringify","result","get","json","process","env","NODE_ENV","console","group","info","groupCollapsed","trace","groupEnd","e","message","stack","pause","duration","Promise","res","setTimeout","retry","retries","fn","delay","delayMultiply"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport type http from 'http';\n// import { IS_WEB, IS_REACT_NATIVE } from './environment.const';\nimport { ApiError, ValidationError, PermissionError } from '../error/error.types';\n\n// constants\n// import env from '../../server/env';\n// import { defaultLanguage } from '../app/languages';\n// import { mobileHeaders } from './api';\n\nimport type { Response, Options } from './api.types';\n\nexport function isValid<T>(url: string, response: Response<T>): Response<T> | never {\n    if (response.code === 401) {\n        throw new PermissionError(`Access denied [${response.code}] to ${url}`);\n    }\n\n    if (response.status !== 'ok') {\n        throw new ValidationError(`${response.code} ${response.data}`, {\n            code: response.code,\n            data: response.data,\n        });\n    }\n    return response;\n}\n\n// `${env.api}${url}${url.includes('?') ? `&language=${lang}` : `?language=${lang}`}`\nexport default async function api<T>(\n    url: string,\n    lang?: string,\n    options?: Options,\n    headers?: http.OutgoingHttpHeaders,\n): Promise<[Response<T>, Headers]> | never {\n    const credentials: RequestCredentials = 'omit';\n    const mode: RequestMode = 'cors';\n    try {\n        const request = fetch(\n            `${url}`,\n            Object.assign(\n                {},\n                {\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                        // 'Accept-Language': lang || defaultLanguage,\n                        // 'Content-Language': lang || defaultLanguage,\n                        ...headers,\n                    },\n                    mode,\n                    credentials,\n                },\n                options,\n                options?.body && options?.method !== 'GET' ? { body: JSON.stringify(options.body) } : {},\n            ),\n        );\n        const result = await request;\n        let response: Response<T> = null!;\n\n        if (result.headers.get('content-type') === 'application/json') {\n            response = await result.json();\n        } else {\n            throw new ValidationError('Json parsing error', {\n                code: result.status,\n                data: {\n                    url,\n                    method: options?.method,\n                },\n            });\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n            /* eslint-disable no-console */\n            console.group(`API Request Debug ${url}`);\n            console.info(`Url ${url}`);\n            console.info('Response', response);\n            console.groupCollapsed('Stack trace');\n            console.trace();\n            console.groupEnd();\n            console.groupEnd();\n            /* eslint-enable no-console */\n        }\n\n        return [isValid(url, response), result.headers];\n    } catch (e) {\n        if (e instanceof ValidationError || e instanceof PermissionError) {\n            throw e;\n        }\n\n        throw new ApiError(e.message, {\n            code: 500,\n            stack: e.stack,\n        });\n    }\n}\n\nexport const pause = (duration: number): Promise<void> =>\n    new Promise(res => setTimeout(res, duration));\n\n\nexport async function retry<T>(\n    retries: number,\n    fn: () => Promise<T>,\n    delay = 500,\n    delayMultiply = 1,\n): Promise<T> {\n    try {\n        return await fn();\n    } catch (e) {\n        if (retries > 1) {\n            await pause(delay);\n            return retry(retries - 1, fn, delay * delayMultiply);\n        }\n        throw e;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}